const assetsSet = new Set()
const origin = self.origin;

// generated by serviceworker-webpack-plugin
// eslint-disable-next-line
serviceWorkerOption.assets.forEach(asset => {
    assetsSet.add(origin + asset)
})


const cacheURLRegExp = /\.(woff2|png|jpg|ico|css|js|json)/;
const cacheMethod = 'GET'
const isCachable = req => {
    const { url, method } = req;
    return method == cacheMethod && cacheURLRegExp.test(url)   
}

self.addEventListener('fetch', e => {
    const req = e.request;

    if (isCachable(req)) {
        const result = caches.match(req).then(async cachedResp => {
            if (cachedResp) return cachedResp;

            try {
                const res = await fetch(req)
                if (res.ok) {
                    const cache = await caches.open(req.url)
                    cache.put(req, res.clone())
    
                    return res
                }
            } catch(err) { console.error(err) }
        })

        e.respondWith(result)
    }
})


self.addEventListener('activate', async () => {
    await self.clients.claim()
    
    const cachesKeys = await caches.keys()
    cachesKeys.forEach(cacheName => {
        assetsSet.has(cacheName) || caches.delete(cacheName)
    })
    
    const cachesKeysSet = new Set(cachesKeys)
    assetsSet.forEach(async asset => {
        if (!cachesKeysSet.has(asset)) {
            const cache = await caches.open(asset)
            cache.add(asset)
        }
    })
})


self.addEventListener('install', () => { self.skipWaiting() })